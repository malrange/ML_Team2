# install.packages('gridExtra')
library(dplyr)
library(tidyr)
library(stringr)
library(ggplot2)
library(gridExtra)
# 필요한 패키지를 설치하고 불러옵니다.
# install.packages("showtext")
library(showtext)
# showtext를 사용하여 폰트 시스템을 초기화합니다.
showtext_auto(enable = TRUE)
# 사용할 한글 폰트를 등록합니다. 여기서는 'NanumGothic'을 사용합니다.
font_add_google("Nanum Gothic", "nanumgothic")
# 그래픽 장치를 초기화하고 한글 폰트를 사용하도록 설정합니다.
showtext_begin()
rm(list=ls())
setwd("~/Desktop/ML_Team2/")
car_data <- read.csv("car_bobe (2).csv", stringsAsFactors = FALSE)
View(car_data)
# '가격' 컬럼에 NA값이 있는 행을 제거합니다.
car_data <- car_data[car_data$가격 != "", ]
car_data <- car_data %>%
filter(!is.na(가격))
car_data <- car_data %>%
filter(!str_detect(가격, "^[^0-9]"))
car_data$가격 <- gsub('만원', '', car_data$가격)
car_data$가격 <- gsub(',', '', car_data$가격)
car_data$가격 <- as.numeric(car_data$가격)
#연식 -> YYYY.MM 로 통일
car_data <- car_data %>%
mutate(연식 = gsub("^\\s+|\\s+$", "", substr(연식, 1, 8)))
#배기량 -> numeric 형으로
car_data <- car_data %>%
mutate(배기량 = as.integer(gsub(" cc.*$", "", gsub(",", "", 배기량))))
car_data <- car_data %>%
mutate(주행거리 = gsub(" km", "", 주행거리), # Remove ' km'
주행거리 = gsub(",", "", 주행거리), # Remove commas
주행거리 = as.integer(주행거리)) # Convert to integer
car_data$색상 <- sub("색.*", "", car_data$색상)
color_groups <- list(
"흰" = c("흰", "진주", "진주투톤"),
"회" = c("회", "진회", "은"),
"파란" = c("파란", "청", "청옥", "하늘", "남", "은하늘", "진청"),
"검정" = c("검정", "검정투톤"),
"노란" = c("베이지", "노란", "금", "연금"),
"자주" = c("자주","보라"))
# 그룹화된 색상으로 변경
for (group in names(color_groups)) {
car_data$색상[car_data$색상 %in% color_groups[[group]]] <- group
}
# '차종' 컬럼을 첫 공백을 기준으로 분할하여 '브랜드'와 '차종' 컬럼으로 나누기
split_names <- strsplit(as.character(car_data$차종), " ", fixed = TRUE)
car_data$브랜드 <- sapply(split_names, function(x) x[1])
car_data$차종 <- sapply(split_names, function(x) paste(x[-1], collapse = " "))
# 9번째 컬럼부터 끝(옵션 컬럼들)까지의 NA 값을 0으로 바꾸기
car_data[, 9:ncol(car_data)][is.na(car_data[, 9:ncol(car_data)])] <- 0
car_data <- car_data[, c(ncol(car_data), 1:(ncol(car_data)-1))]
car_data$전손유무 <- 0
car_data$침수유무 <- 0
car_data$소유자.이전.횟수[car_data$소유자.이전.횟수 == ""] <- 0
car_data <- car_data %>%
mutate(`소유자.이전.횟수` = as.integer(gsub("회", "", `소유자.이전.횟수`)))
write.csv(car_data, file = "donotlabeling.csv", row.names = FALSE)
car_data$색상 <- as.numeric(factor(car_data$색상, levels = unique(car_data$색상)))
car_data$색상 <- as.numeric(factor(car_data$색상, levels = unique(car_data$색상)))
car_data$변속기 <- as.numeric(factor(car_data$변속기, levels = unique(car_data$변속기)))
car_data$연료 <- as.numeric(factor(car_data$연료, levels = unique(car_data$연료)))
write.csv(car_data, file = "bobae_preprocessing.csv", row.names = FALSE)
View(car_data)
str(car_data)
# 주행거리에 대한 히스토그램
p5 <- ggplot(car_data, aes(x=주행거리)) +
geom_histogram(binwidth=10000, fill="skyblue", color="black") +
theme_minimal() +
labs(title="주행거리 분포", x="주행거리 (km)", y="빈도") +
scale_x_continuous(labels = scales::comma)
# 배기량에 대한 히스토그램
p6 <- ggplot(car_data, aes(x=배기량)) +
geom_histogram(binwidth=100, fill="pink", color="black") +
theme_minimal() +
labs(title="배기량 분포", x="배기량 (cc)", y="빈도") +
scale_x_continuous(labels = scales::comma)
# 가격에 대한 히스토그램
p7 <- ggplot(car_data, aes(x=가격)) +
geom_histogram(binwidth=500, fill="lightgreen", color="black") +
theme_minimal() +
labs(title="가격 분포", x="가격 (만원)", y="빈도") +
scale_x_continuous(labels = scales::comma)
# 세 개의 그래프를 한 페이지에 배열
grid.arrange(p5, p6, p7, nrow = 3)
# 필요한 패키지를 불러옵니다.
library(dplyr)
library(tidyr)
library(stringr)
library(ggplot2)
library(gridExtra)
library(showtext)
# showtext를 사용하여 한글 폰트 문제를 해결합니다.
showtext_auto(enable = TRUE)
font_add_google("Nanum Gothic", "nanumgothic")
data <- read.csv("donotlabeling.csv")
# 파스텔 톤 색상 팔레트 설정
colors <- c("#fbb4ae", "#b3cde3", "#ccebc5", "#decbe4", "#fed9a6",
"#ffffcc", "#e5d8bd", "#fddaec", "#f2f2f2", "#b3e2cd",
"#fdcdac", "#1f78b4", "#a9a9a9")
View(data)
# 알록달록하고 이쁜 그래프를 그립니다.
p1 <- ggplot(data, aes(x=브랜드, fill=브랜드)) +
geom_bar() +
scale_fill_manual(values=colors) +
theme_minimal() +
labs(title="브랜드별 빈도", x="브랜드", y="빈도수") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, family="nanumgothic"),
text = element_text(family="nanumgothic"),
plot.title = element_text(hjust = 0.5))
p1
# 알록달록하고 이쁜 그래프를 그립니다.
p2 <- ggplot(data, aes(x=색상, fill=색상)) +
geom_bar() +
scale_fill_manual(values=colors) +
theme_minimal() +
labs(title="색상별 빈도", x="색상", y="빈도수") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, family="nanumgothic"),
text = element_text(family="nanumgothic"),
plot.title = element_text(hjust = 0.5))
p2
p3 <- ggplot(data, aes(x=변속기, fill=변속기)) +
geom_bar() +
scale_fill_manual(values=colors) +
theme_minimal() +
labs(title="변속기별 빈도", x="변속기", y="빈도수") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, family="nanumgothic"),
text = element_text(family="nanumgothic"),
plot.title = element_text(hjust = 0.5))
p3
p4 <- ggplot(data, aes(x=연료, fill=연료)) +
geom_bar() +
scale_fill_manual(values=colors) +
theme_minimal() +
labs(title="연료별 빈도", x="연료", y="빈도수") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, family="nanumgothic"),
text = element_text(family="nanumgothic"),
plot.title = element_text(hjust = 0.5))
p4
grid.arrange(p1, p2, p3, p4, nrow = 2)
# 주행거리에 대한 히스토그램
p5 <- ggplot(car_data, aes(x=주행거리)) +
geom_histogram(binwidth=10000, fill="skyblue", color="black") +
theme_minimal() +
labs(title="주행거리 분포", x="주행거리 (km)", y="빈도") +
scale_x_continuous(labels = scales::comma)
# 배기량에 대한 히스토그램
p6 <- ggplot(car_data, aes(x=배기량)) +
geom_histogram(binwidth=100, fill="pink", color="black") +
theme_minimal() +
labs(title="배기량 분포", x="배기량 (cc)", y="빈도") +
scale_x_continuous(labels = scales::comma)
# 가격에 대한 히스토그램
p7 <- ggplot(car_data, aes(x=가격)) +
geom_histogram(binwidth=500, fill="lightgreen", color="black") +
theme_minimal() +
labs(title="가격 분포", x="가격 (만원)", y="빈도") +
scale_x_continuous(labels = scales::comma)
# 세 개의 그래프를 한 페이지에 배열
grid.arrange(p5, p6, p7, nrow = 3)
data
View(data)
# 가격에 대한 히스토그램
p7 <- ggplot(data, aes(x=가격)) +
geom_histogram(binwidth=500, fill="lightgreen", color="black") +
theme_minimal() +
labs(title="가격 분포", x="가격 (만원)", y="빈도") +
scale_x_continuous(labels = scales::comma)
# 세 개의 그래프를 한 페이지에 배열
grid.arrange(p5, p6, p7, nrow = 3)
# 가격에 대한 히스토그램
p7 <- ggplot(data, aes(x=가격)) +
geom_histogram(binwidth=500, fill="lightgreen", color="black") +
theme_minimal() +
labs(title="가격 분포", x="가격 (만원)", y="빈도") +
scale_x_continuous(labels = scales::comma)
p7
# 가격에 대한 히스토그램
p7 <- ggplot(data, aes(x=가격)) +
geom_density(fill="salmon", alpha=0.5) +
theme_minimal() +
labs(title="가격 분포 (밀도 그래프)", x="가격 (만원)") +
scale_x_continuous(labels = scales::comma)
p7
data$가격
p_box
p_box <- ggplot(data, aes(y=가격)) +
geom_boxplot(fill="lightblue", color="black") +
theme_minimal() +
labs(title="가격 분포 (박스 플롯)", y="가격 (만원)")
p_box
p_density <- ggplot(data, aes(x=가격)) +
geom_density(fill="salmon", alpha=0.5) +
theme_minimal() +
labs(title="가격 분포 (밀도 그래프)", x="가격 (만원)")
p_density
# 주행거리에 대한 히스토그램
p5 <- ggplot(data, aes(x=주행거리)) +
geom_histogram(binwidth=10000, fill="skyblue", color="black") +
theme_minimal() +
labs(title="주행거리 분포", x="주행거리 (km)", y="빈도") +
scale_x_continuous(labels = scales::comma)
# 배기량에 대한 히스토그램
p6 <- ggplot(data, aes(x=배기량)) +
geom_histogram(binwidth=100, fill="pink", color="black") +
theme_minimal() +
labs(title="배기량 분포", x="배기량 (cc)", y="빈도") +
scale_x_continuous(labels = scales::comma)
# 세 개의 그래프를 한 페이지에 배열
grid.arrange(p5, p6, nrow = 2)
p7 <- ggplot(data, aes(x=가격)) +
geom_histogram(binwidth=100, fill="pink", color="black") +
theme_minimal() +
labs(title="배기량 분포", x="가격(만원)", y="빈도") +
scale_x_continuous(labels = scales::comma)
p7
p7 <- ggplot(data, aes(x=가격)) +
geom_histogram(binwidth=100, fill="pink", color="black") +
theme_minimal() +
labs(title="가격 분포", x="가격(만원)", y="빈도") +
scale_x_continuous(labels = scales::comma)
p7
unique(data$색상)
# 파스텔 톤 색상 팔레트 설정
colors <- c("#fbb4ae", "#b3cde3", "#ccebc5", "#decbe4", "#fed9a6",
"#ffffcc", "#e5d8bd", "#fddaec", "#f2f2f2", "#b3e2cd",
"#fdcdac", "#1f78b4", "#a9a9a9")
# 알록달록하고 이쁜 그래프를 그립니다.
p2 <- ggplot(data, aes(x=색상, fill=색상)) +
geom_bar() +
scale_fill_manual(values=colors) +
theme_minimal() +
labs(title="색상별 빈도", x="색상", y="빈도수") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, family="nanumgothic"),
text = element_text(family="nanumgothic"),
plot.title = element_text(hjust = 0.5))
p2
colors_mapped <- c("회"="#a9a9a9",   # 회색
"흰"="#f2f2f5",   # 흰색
"검정"="#1f78b4", # 검정색 (파란색 계열로 표현)
"파란"="#b3cde3", # 파란색
"노란"="#ffffcc", # 노란색
"갈"="#e5d8bd",   # 갈색
"주황"="#fdcdac", # 주황색
"빨간"="#fbb4ae", # 빨간색
"자주"="#decbe4", # 자주색
"분홍"="#fddaec", # 분홍색
"기타"="black", # 기타 (노란색 계열로 표현)
"녹"="#b3e2cd")  # 녹색
# 알록달록하고 이쁜 그래프를 그립니다.
p2 <- ggplot(data, aes(x=색상, fill=색상)) +
geom_bar() +
scale_fill_manual(values=colors_mapped) +
theme_minimal() +
labs(title="색상별 빈도", x="색상", y="빈도수") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, family="nanumgothic"),
text = element_text(family="nanumgothic"),
plot.title = element_text(hjust = 0.5))
p2
colors_mapped <- c("회"="#a9a9a9",   # 회색
"흰"="#e9f9f9",   # 흰색
"검정"="black", # 검정색 (파란색 계열로 표현)
"파란"="#b3cde3", # 파란색
"노란"="#ffffcc", # 노란색
"갈"="#e5d8bd",   # 갈색
"주황"="#fdcdac", # 주황색
"빨간"="#fbb4ae", # 빨간색
"자주"="#decbe4", # 자주색
"분홍"="#fddaec", # 분홍색
"기타"="#b1b9f9", # 기타 (노란색 계열로 표현)
"녹"="#b3e2cd")  # 녹색
# 알록달록하고 이쁜 그래프를 그립니다.
p2 <- ggplot(data, aes(x=색상, fill=색상)) +
geom_bar() +
scale_fill_manual(values=colors_mapped) +
theme_minimal() +
labs(title="색상별 빈도", x="색상", y="빈도수") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, family="nanumgothic"),
text = element_text(family="nanumgothic"),
plot.title = element_text(hjust = 0.5))
p2
# 알록달록하고 이쁜 그래프를 그립니다.
p1 <- ggplot(data, aes(x=브랜드, fill=브랜드)) +
geom_bar() +
scale_fill_manual(values=colors) +
theme_minimal() +
labs(title="브랜드별 빈도", x="브랜드", y="빈도수") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, family="nanumgothic"),
text = element_text(family="nanumgothic"),
plot.title = element_text(hjust = 0.5))
p1
# 알록달록하고 이쁜 그래프를 그립니다.
p2 <- ggplot(data, aes(x=색상, fill=색상)) +
geom_bar() +
scale_fill_manual(values=colors_mapped) +
theme_minimal() +
labs(title="색상별 빈도", x="색상", y="빈도수") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, family="nanumgothic"),
text = element_text(family="nanumgothic"),
plot.title = element_text(hjust = 0.5))
p2
p3 <- ggplot(data, aes(x=변속기, fill=변속기)) +
geom_bar() +
scale_fill_manual(values=colors) +
theme_minimal() +
labs(title="변속기별 빈도", x="변속기", y="빈도수") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, family="nanumgothic"),
text = element_text(family="nanumgothic"),
plot.title = element_text(hjust = 0.5))
p3
p4 <- ggplot(data, aes(x=연료, fill=연료)) +
geom_bar() +
scale_fill_manual(values=colors) +
theme_minimal() +
labs(title="연료별 빈도", x="연료", y="빈도수") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, family="nanumgothic"),
text = element_text(family="nanumgothic"),
plot.title = element_text(hjust = 0.5))
p4
grid.arrange(p1, p2, p3, p4, nrow = 2)
data_numeric <- data %>% select_if(is.numeric)
View(data_numeric)
# 데이터의 연속형 변수들만 선택합니다.
# 여기서는 예시이므로 실제 데이터에 맞게 변수를 선택해야 합니다.
data_continuous <- data[, c("가격", "배기량", "주행거리")]
# 상관계수 행렬을 계산합니다.
cor_matrix <- cor(data_continuous, use="complete.obs")  # NA 값이 있는 경우를 처리
# 상관계수 히트맵을 그립니다.
corrplot(cor_matrix, method="color", type="upper", order="hclust",
tl.col="black", tl.srt=45,  # 텍스트 색상과 각도
addCoef.col = "black", # 상관계수 값의 색상
# 다음 옵션은 필요에 따라 조정 가능
col=brewer.pal(n=8, name="RdBu"), # 색상 팔레트
diag=FALSE) # 대각선(자기 자신과의 상관계수) 제거
# 필요한 라이브러리를 로드합니다.
library(corrplot)
# 필요한 라이브러리를 로드합니다.
install.packages("corrplot")
library(corrplot)
# 데이터의 연속형 변수들만 선택합니다.
# 여기서는 예시이므로 실제 데이터에 맞게 변수를 선택해야 합니다.
data_continuous <- data[, c("가격", "배기량", "주행거리")]
# 상관계수 행렬을 계산합니다.
cor_matrix <- cor(data_continuous, use="complete.obs")  # NA 값이 있는 경우를 처리
# 상관계수 히트맵을 그립니다.
corrplot(cor_matrix, method="color", type="upper", order="hclust",
tl.col="black", tl.srt=45,  # 텍스트 색상과 각도
addCoef.col = "black", # 상관계수 값의 색상
# 다음 옵션은 필요에 따라 조정 가능
col=brewer.pal(n=8, name="RdBu"), # 색상 팔레트
diag=FALSE) # 대각선(자기 자신과의 상관계수) 제거
install.packages("RColorBrewer")
library(RColorBrewer)
# 상관계수 히트맵을 그립니다.
corrplot(cor_matrix, method="color", type="upper", order="hclust",
tl.col="black", tl.srt=45,  # 텍스트 색상과 각도
addCoef.col = "black", # 상관계수 값의 색상
# 다음 옵션은 필요에 따라 조정 가능
col=brewer.pal(n=8, name="RdBu"), # 색상 팔레트
diag=FALSE) # 대각선(자기 자신과의 상관계수) 제거
# 데이터의 연속형 변수들만 선택합니다.
# 여기서는 예시이므로 실제 데이터에 맞게 변수를 선택해야 합니다.
data_continuous <- data[, c("가격", "배기량", "주행거리","소유자.이전.횟수")]
# 상관계수 행렬을 계산합니다.
cor_matrix <- cor(data_continuous, use="complete.obs")  # NA 값이 있는 경우를 처리
# 상관계수 히트맵을 그립니다.
corrplot(cor_matrix, method="color", type="upper", order="hclust",
tl.col="black", tl.srt=45,  # 텍스트 색상과 각도
addCoef.col = "black", # 상관계수 값의 색상
# 다음 옵션은 필요에 따라 조정 가능
col=brewer.pal(n=8, name="RdBu"), # 색상 팔레트
diag=FALSE) # 대각선(자기 자신과의 상관계수) 제거
cor_matrix <- cor(data_continuous, use = "complete.obs")  # NA 값이 있는 경우를 처리
corrplot(cor_matrix, method = "color", type = "full", order = "hclust",
tl.col = "black", tl.srt = 45,  # 텍스트 색상과 각도
addCoef.col = "black",  # 상관계수 값의 색상
col = brewer.pal(n = 8, name = "RdBu"),  # 색상 팔레트
diag = FALSE)  # 대각선 제거 (필요에 따라)
corrplot(cor_matrix, method = "color", type = "full", order = "hclust",
tl.col = "black", tl.srt = 45,  # 텍스트 색상과 각도
addCoef.col = "black",  # 상관계수 값의 색상
col = brewer.pal(n = 8, name = "RdBu")) # 색상 팔레트
# 가격 중 잘못 입력된 값 2개 정정하기
car_data[car_data$가격 == 30000000, '가격'] = 3000
car_data[car_data$가격 == 630000, '가격'] = 630
# 주행거리 중 잘못 입력된 값 정정하기
car_data[car_data$주행거리 == 2322500, '주행거리'] = 232000
write.csv(car_data, file = "after_high_to_low.csv", row.names = FALSE)
cor_matrix <- cor(data_continuous, use = "complete.obs")  # NA 값이 있는 경우를 처리
corrplot(cor_matrix, method = "color", type = "full", order = "hclust",
tl.col = "black", tl.srt = 45,  # 텍스트 색상과 각도
addCoef.col = "black",  # 상관계수 값의 색상
col = brewer.pal(n = 8, name = "RdBu")) # 색상 팔레트
data_2 <- read.csv("after_high_to_low.csv")
unique(data$색상)
# 파스텔 톤 색상 팔레트 설정
colors <- c("#fbb4ae", "#b3cde3", "#ccebc5", "#decbe4", "#fed9a6",
"#ffffcc", "#e5d8bd", "#fddaec", "#f2f2f2", "#b3e2cd",
"#fdcdac", "#1f78b4", "#a9a9a9")
colors_mapped <- c("회"="#a9a9a9",   # 회색
"흰"="#e9f9f9",   # 흰색
"검정"="black", # 검정색 (파란색 계열로 표현)
"파란"="#b3cde3", # 파란색
"노란"="#ffffcc", # 노란색
"갈"="#e5d8bd",   # 갈색
"주황"="#fdcdac", # 주황색
"빨간"="#fbb4ae", # 빨간색
"자주"="#decbe4", # 자주색
"분홍"="#fddaec", # 분홍색
"기타"="#b1b9f9", # 기타 (노란색 계열로 표현)
"녹"="#b3e2cd")  # 녹색
# 알록달록하고 이쁜 그래프를 그립니다.
p1 <- ggplot(data, aes(x=브랜드, fill=브랜드)) +
geom_bar() +
scale_fill_manual(values=colors) +
theme_minimal() +
labs(title="브랜드별 빈도", x="브랜드", y="빈도수") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, family="nanumgothic"),
text = element_text(family="nanumgothic"),
plot.title = element_text(hjust = 0.5))
p1
# 알록달록하고 이쁜 그래프를 그립니다.
p2 <- ggplot(data, aes(x=색상, fill=색상)) +
geom_bar() +
scale_fill_manual(values=colors_mapped) +
theme_minimal() +
labs(title="색상별 빈도", x="색상", y="빈도수") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, family="nanumgothic"),
text = element_text(family="nanumgothic"),
plot.title = element_text(hjust = 0.5))
p2
p3 <- ggplot(data, aes(x=변속기, fill=변속기)) +
geom_bar() +
scale_fill_manual(values=colors) +
theme_minimal() +
labs(title="변속기별 빈도", x="변속기", y="빈도수") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, family="nanumgothic"),
text = element_text(family="nanumgothic"),
plot.title = element_text(hjust = 0.5))
p3
p4 <- ggplot(data, aes(x=연료, fill=연료)) +
geom_bar() +
scale_fill_manual(values=colors) +
theme_minimal() +
labs(title="연료별 빈도", x="연료", y="빈도수") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, family="nanumgothic"),
text = element_text(family="nanumgothic"),
plot.title = element_text(hjust = 0.5))
p4
grid.arrange(p1, p2, p3, p4, nrow = 2)
# 주행거리에 대한 히스토그램
p5 <- ggplot(data2, aes(x=주행거리)) +
geom_histogram(binwidth=10000, fill="skyblue", color="black") +
theme_minimal() +
labs(title="주행거리 분포", x="주행거리 (km)", y="빈도") +
scale_x_continuous(labels = scales::comma)
# 주행거리에 대한 히스토그램
p5 <- ggplot(data2, aes(x=주행거리)) +
geom_histogram(binwidth=10000, fill="skyblue", color="black") +
theme_minimal() +
labs(title="주행거리 분포", x="주행거리 (km)", y="빈도") +
scale_x_continuous(labels = scales::comma)
# 가격 중 잘못 입력된 값 2개 정정하기
car_data[car_data$가격 == 30000000, '가격'] = 3000
car_data[car_data$가격 == 630000, '가격'] = 630
# 주행거리 중 잘못 입력된 값 정정하기
car_data[car_data$주행거리 == 2322500, '주행거리'] = 232000
write.csv(car_data, file = "after_high_to_low.csv", row.names = FALSE)
View(car_data)
# 주행거리에 대한 히스토그램
p5 <- ggplot(data_2, aes(x=주행거리)) +
geom_histogram(binwidth=10000, fill="skyblue", color="black") +
theme_minimal() +
labs(title="주행거리 분포", x="주행거리 (km)", y="빈도") +
scale_x_continuous(labels = scales::comma)
p5
# 배기량에 대한 히스토그램
p6 <- ggplot(data, aes(x=배기량)) +
geom_histogram(binwidth=100, fill="pink", color="black") +
theme_minimal() +
labs(title="배기량 분포", x="배기량 (cc)", y="빈도") +
scale_x_continuous(labels = scales::comma)
# 배기량에 대한 히스토그램
p6 <- ggplot(data_2, aes(x=배기량)) +
geom_histogram(binwidth=100, fill="pink", color="black") +
theme_minimal() +
labs(title="배기량 분포", x="배기량 (cc)", y="빈도") +
scale_x_continuous(labels = scales::comma)
p6
# 주행거리에 대한 히스토그램
p5 <- ggplot(data_2, aes(x=주행거리)) +
geom_histogram(binwidth=10000, fill="skyblue", color="black") +
theme_minimal() +
labs(title="주행거리 분포", x="주행거리 (km)", y="빈도") +
scale_x_continuous(labels = scales::comma)
p5
p6
p7 <- ggplot(data, aes(x=가격)) +
geom_histogram(binwidth=100, fill="pink", color="black") +
theme_minimal() +
labs(title="가격 분포", x="가격(만원)", y="빈도") +
scale_x_continuous(labels = scales::comma)
p7
# 세 개의 그래프를 한 페이지에 배열
grid.arrange(p5, p6, nrow = 2)
# 세 개의 그래프를 한 페이지에 배열
grid.arrange(p5, p6, nrow = 2)
